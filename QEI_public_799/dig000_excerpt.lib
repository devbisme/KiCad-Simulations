*------------------------------------------------------------74LS86----------

* Quad 2-Input Exclusive-OR Gates
* National LS/S/TTL Logic Data Book, 1989, pages 2-98 TO 2-100
* jat 8/6/96

.SUBCKT 74LS86 A1 B1 Y1
+ OPTIONAL: DPWR=$G_DPWR DGND=$G_DGND
+ PARAMS: MNTYMXDLY=0 IO_LEVEL=0

U1 XOR DPWR DGND
+ A1 B1 Y1O
+ D0_GATE IO_LS MNTYMXDLY={MNTYMXDLY} IO_LEVEL={IO_LEVEL}

U2 PINDLY(1,0,2) DPWR DGND
+ Y1O
+ A1 B1
+ Y1
+ IO_LS MNTYMXDLY={MNTYMXDLY} IO_LEVEL={IO_LEVEL}
+ PINDLY:
+   Y1 = {
+     CASE(
+           CHANGED(A1,0) & B1=='1 & TRN_LH, DELAY(-1,-1,15NS),
+           CHANGED(B1,0) & A1=='1 & TRN_LH, DELAY(-1,-1,15NS),
+           CHANGED(A1,0) & B1=='1 & TRN_HL, DELAY(-1,-1,15NS),
+           CHANGED(B1,0) & A1=='1 & TRN_HL, DELAY(-1,-1,15NS),
+           CHANGED(A1,0) & B1=='0 & TRN_LH, DELAY(-1,-1,23NS),
+           CHANGED(B1,0) & A1=='0 & TRN_LH, DELAY(-1,-1,23NS),
+           CHANGED(A1,0) & B1=='0 & TRN_HL, DELAY(-1,-1,21NS),
+           CHANGED(B1,0) & A1=='0 & TRN_HL, DELAY(-1,-1,21NS),
+           DELAY(-1,-1,24NS))}

.ENDS 74LS86

* ----------------------------------------------------------- 74LS74A ------
*  Dual D-Type Positive Edge Triggered Flip-Flops With  Preset And Clear
*
*  The TTL Logic Data Book, 1988, TI Pages 2-235 to 2-240
*  bss    2/24/94
*
.SUBCKT 74LS74A 1PREBAR 1CLRBAR 1CLK 1D 1Q 1QBAR
+     optional:  DPWR=$G_DPWR DGND=$G_DGND
+     params:  MNTYMXDLY=0 IO_LEVEL=0

U1 DFF(1) DPWR DGND
+     1PREBAR 1CLRBAR 1CLK 1D 1Q 1QBAR
+     DLY_LS74 IO_LS MNTYMXDLY={MNTYMXDLY} IO_LEVEL={IO_LEVEL}

.model DLY_LS74 ueff(tppcqlhTY=13ns tppcqlhMX=25ns tppcqhlTY=25ns
+                 tppcqhlMX=40ns twpclMN=25ns tpclkqlhTY=13ns
+                 tpclkqlhMX=25ns tpclkqhlTY=25ns tpclkqhlMX=40ns
+                 twclkhMN=25ns tsudclkMN=20ns thdclkMN=5ns)

.ENDS 74LS74A
*
* ----------------------------------------------------------- 74LS138 ------
*  3-Line To 8-Line Decoder/Demultiplexer
*
*  The TTL Logic Data Book, 1988, TI Pages 2-425 to 2-430
*  bss    3/16/94
*
.SUBCKT 74LS138 A B C G1 G2ABAR G2BBAR Y0 Y1 Y2 Y3 Y4 Y5 Y6 Y7
+     optional:  DPWR=$G_DPWR DGND=$G_DGND
+     params:  MNTYMXDLY=0 IO_LEVEL=0

U1LOG LOGICEXP(6,8) DPWR DGND
+     A B C G1 G2ABAR G2BBAR
+     Y0_O Y1_O Y2_O Y3_O Y4_O Y5_O Y6_O Y7_O
+     D0_GATE IO_LS MNTYMXDLY={MNTYMXDLY} IO_LEVEL={IO_LEVEL}
+
+  LOGIC:
+     abar = {~A}
+     bbar = {~B}
+     cbar = {~C}
+     enable = {(~G2ABAR) & (~G2BBAR) & G1}
+     Y0_O = {~(abar & bbar & cbar & enable)}
+     Y1_O = {~(A & bbar & cbar & enable)}
+     Y2_O = {~(abar & B & cbar & enable)}
+     Y3_O = {~(A & B & cbar & enable)}
+     Y4_O = {~(abar & bbar & C & enable)}
+     Y5_O = {~(A & bbar & C & enable)}
+     Y6_O = {~(abar & B & C & enable)}
+     Y7_O = {~(A & B & C & enable)}

U2DLY PINDLY(8,0,6) DPWR DGND
+     Y0_O Y1_O Y2_O Y3_O Y4_O Y5_O Y6_O Y7_O
+     A B C G1 G2ABAR G2BBAR
+     Y0 Y1 Y2 Y3 Y4 Y5 Y6 Y7
+     IO_LS MNTYMXDLY={MNTYMXDLY} IO_LEVEL={IO_LEVEL}
+
+  BOOLEAN:
+     IN = {CHANGED(A,0) | CHANGED(B,0) | CHANGED(C,0)}
+     INA = {CHANGED(A,0)}
+     INB = {CHANGED(B,0)}
+     INC = {CHANGED(C,0)}
+     ENBAR = {CHANGED(G2ABAR,0) | CHANGED(G2BBAR,0)}
+     EN = {CHANGED(G1,0)}
+
+  PINDLY:
+     Y0 = {
+       CASE(
+          ENBAR & TRN_LH, DELAY(-1,12ns,18ns),
+          ENBAR & TRN_HL, DELAY(-1,20ns,32ns),
+          EN & TRN_LH, DELAY(-1,14ns,26ns),
+          EN & TRN_HL, DELAY(-1,13ns,38ns),
+          IN & TRN_LH, DELAY(-1,11ns,20ns),
+          IN & TRN_HL, DELAY(-1,18ns,41ns),
+          DELAY(-1,21ns,42ns))}
+
+     Y1 = {
+       CASE(
+          ENBAR & TRN_LH, DELAY(-1,12ns,18ns),
+          ENBAR & TRN_HL, DELAY(-1,20ns,32ns),
+          EN & TRN_LH, DELAY(-1,14ns,26ns),
+          EN & TRN_HL, DELAY(-1,13ns,38ns),
+          INA & TRN_LH, DELAY(-1,21ns,27ns),
+          INA & TRN_HL, DELAY(-1,20ns,39ns),
+          (INB | INC) & TRN_LH, DELAY(-1,11ns,20ns),
+          (INB | INC) & TRN_HL, DELAY(-1,18ns,41ns),
+          DELAY(-1,22ns,42ns))}
+
+     Y2 = {
+       CASE(
+          ENBAR & TRN_LH, DELAY(-1,12ns,18ns),
+          ENBAR & TRN_HL, DELAY(-1,20ns,32ns),
+          EN & TRN_LH, DELAY(-1,14ns,26ns),
+          EN & TRN_HL, DELAY(-1,13ns,38ns),
+          INB & TRN_LH, DELAY(-1,21ns,27ns),
+          INB & TRN_HL, DELAY(-1,20ns,39ns),
+          (INA | INC) & TRN_LH, DELAY(-1,11ns,20ns),
+          (INA | INC) & TRN_HL, DELAY(-1,18ns,41ns),
+          DELAY(-1,22ns,42ns))}
+
+     Y3 = {
+       CASE(
+          ENBAR & TRN_LH, DELAY(-1,12ns,18ns),
+          ENBAR & TRN_HL, DELAY(-1,20ns,32ns),
+          EN & TRN_LH, DELAY(-1,14ns,26ns),
+          EN & TRN_HL, DELAY(-1,13ns,38ns),
+          (INA | INB) & TRN_LH, DELAY(-1,21ns,27ns),
+          (INA | INB) & TRN_HL, DELAY(-1,20ns,39ns),
+          INC & TRN_LH, DELAY(-1,11ns,20ns),
+          INC & TRN_HL, DELAY(-1,18ns,41ns),
+          DELAY(-1,22ns,42ns))}
+
+     Y4 = {
+       CASE(
+          ENBAR & TRN_LH, DELAY(-1,12ns,18ns),
+          ENBAR & TRN_HL, DELAY(-1,20ns,32ns),
+          EN & TRN_LH, DELAY(-1,14ns,26ns),
+          EN & TRN_HL, DELAY(-1,13ns,38ns),
+          INC & TRN_LH, DELAY(-1,21ns,27ns),
+          INC & TRN_HL, DELAY(-1,20ns,39ns),
+          (INB | INA) & TRN_LH, DELAY(-1,11ns,20ns),
+          (INB | INA) & TRN_HL, DELAY(-1,18ns,41ns),
+          DELAY(-1,22ns,42ns))}
+
+     Y5 = {
+       CASE(
+          ENBAR & TRN_LH, DELAY(-1,12ns,18ns),
+          ENBAR & TRN_HL, DELAY(-1,20ns,32ns),
+          EN & TRN_LH, DELAY(-1,14ns,26ns),
+          EN & TRN_HL, DELAY(-1,13ns,38ns),
+          (INA | INC) & TRN_LH, DELAY(-1,21ns,27ns),
+          (INA | INC) & TRN_HL, DELAY(-1,20ns,39ns),
+          INB & TRN_LH, DELAY(-1,11ns,20ns),
+          INB & TRN_HL, DELAY(-1,18ns,41ns),
+          DELAY(-1,22ns,42ns))}
+
+     Y6 = {
+       CASE(
+          ENBAR & TRN_LH, DELAY(-1,12ns,18ns),
+          ENBAR & TRN_HL, DELAY(-1,20ns,32ns),
+          EN & TRN_LH, DELAY(-1,14ns,26ns),
+          EN & TRN_HL, DELAY(-1,13ns,38ns),
+          (INB | INC) & TRN_LH, DELAY(-1,21ns,27ns),
+          (INB | INC) & TRN_HL, DELAY(-1,20ns,39ns),
+          INA & TRN_LH, DELAY(-1,11ns,20ns),
+          INA & TRN_HL, DELAY(-1,18ns,41ns),
+          DELAY(-1,22ns,42ns))}
+
+     Y7 = {
+       CASE(
+          ENBAR & TRN_LH, DELAY(-1,12ns,18ns),
+          ENBAR & TRN_HL, DELAY(-1,20ns,32ns),
+          EN & TRN_LH, DELAY(-1,14ns,26ns),
+          EN & TRN_HL, DELAY(-1,13ns,38ns),
+          IN & TRN_LH, DELAY(-1,21ns,27ns),
+          IN & TRN_HL, DELAY(-1,20ns,39ns),
+          DELAY(-1,22ns,42ns))}

.ENDS 74LS138


*-----------------------------------------------------------74HCT138A-----

* 1 of 8 Decoder/Demultiplexer with LSTTL Compatible Inputs
* Motorola High-Speed CMOS Data, 1993, pages 5-126 to 5-129
* jat 9/4/96

.SUBCKT 74HCT138A A0 A1 A2 CS1 CS2 CS3 Y0 Y1 Y2 Y3 Y4 Y5 Y6 Y7
+ OPTIONAL: DPWR=$G_DPWR DGND=$G_DGND
+ PARAMS: MNTYMXDLY=0 IO_LEVEL=0

U1 LOGICEXP(6,8) DPWR DGND
+ A0 A1 A2 CS1 CS2 CS3
+ Y0O Y1O Y2O Y3O Y4O Y5O Y6O Y7O
+ D0_GATE IO_HCT MNTYMXDLY={MNTYMXDLY} IO_LEVEL={IO_LEVEL}
+ LOGIC:
+   ENAB = {CS1 & ~CS2 & ~CS3}
+   Y0O = {~(~A0 & ~A1 & ~A2 & ENAB)}
+   Y1O = {~(A0 & ~A1 & ~A2 & ENAB)}
+   Y2O = {~(~A0 & A1 & ~A2 & ENAB)}
+   Y3O = {~(A0 & A1 & ~A2 & ENAB)}
+   Y4O = {~(~A0 & ~A1 & A2 & ENAB)}
+   Y5O = {~(A0 & ~A1 & A2 & ENAB)}
+   Y6O = {~(~A0 & A1 & A2 & ENAB)}
+   Y7O = {~(A0 & A1 & A2 & ENAB)}

U2 PINDLY(8,0,6) DPWR DGND
+ Y0O Y1O Y2O Y3O Y4O Y5O Y6O Y7O
+ A0 A1 A2 CS1 CS2 CS3
+ Y0 Y1 Y2 Y3 Y4 Y5 Y6 Y7
+ IO_HCT MNTYMXDLY={MNTYMXDLY} IO_LEVEL={IO_LEVEL}
+ BOOLEAN:
+     IN = {CHANGED(A0,0) | CHANGED(A1,0) | CHANGED(A2,0)}
+     ENBAR = {CHANGED(CS2,0) | CHANGED(CS3,0)}
+     EN = {CHANGED(CS1,0)}
+  PINDLY:
+     Y0 Y1 Y2 Y3 Y4 Y5 Y6 Y7 = {
+       CASE(
+          EN & TRN_LH, DELAY(-1,-1,27NS),
+          EN & TRN_HL, DELAY(-1,-1,27NS),
+          ENBAR & TRN_LH, DELAY(-1,-1,30NS),
+          ENBAR & TRN_HL, DELAY(-1,-1,30NS),
+          IN & TRN_LH, DELAY(-1,-1,30NS),
+          IN & TRN_HL, DELAY(-1,-1,30NS),
+          DELAY(-1,-1,31NS))}

.ENDS 74HCT138A

* ----------------------------------------------------------- 74LS20 ------
*  Dual 4-Input Nand Gates 
*
*  The TTL Logic Data Book, 1988, TI Pages 2-95 to 2-99
*  bss    2/4/94
*
.SUBCKT 74LS20  1A 1B 1C 1D 1Y
+     optional: DPWR=$G_DPWR DGND=$G_DGND
+     params: MNTYMXDLY=0 IO_LEVEL=0

U1 nand(4) DPWR DGND
+     1A 1B 1C 1D 1Y
+     DLY_LS20 IO_LS MNTYMXDLY={MNTYMXDLY} IO_LEVEL={IO_LEVEL}

.model DLY_LS20 ugate (tplhTY=9ns tplhMX=15ns tphlTY=10ns tphlMX=15ns)

.ENDS  74LS20
*
*
* ----------------------------------------------------------- 74LS161A ------
*  Synchronous 4-Bit Binary Counter w/ Async Clear
*
*  The TTL Logic Data Book, 1988, TI Pages 2-493 to 2-513
*  jds    3/25/94
*
.SUBCKT 74LS161A A B C D CLRBAR CLK ENP ENT RCO LOADBAR QA QB QC QD
+  optional: DPWR=$G_DPWR DGND=$G_DGND
+  params: MNTYMXDLY=0 IO_LEVEL=0

U74LS161A LOGICEXP (13, 10) DPWR DGND
+        A B C D CLK ENP ENT LOADBAR QA_O QB_O QC_O QD_O CLRBAR
+        RCO_O ja jb jc jd ka kb kc kd clkbar
+        D0_GATE IO_LS IO_LEVEL={IO_LEVEL}
+
+    LOGIC:
+      clkbar = { (~CLK) }
+      pnt = { ( ENP & ENT) }
+      load = { (~LOADBAR) }
+      RCO_O = { ( ENT & QA_O & QB_O & QC_O & QD_O) }
+      ia2 = { (~(load & A)) }
+      ia1 = { (~(load & ia2)) }
+      ia3 = { (pnt | load) }
+      ib2 = { (~(load & B )) }
+      ib1 = { (~(ib2 & load)) }
+      ib3 = { (load | (QA_O & pnt)) }
+      ic2 = { (~(load & C)) }
+      ic1 = { (~(ic2 & load)) }
+      ic3 = { (load | (pnt & QA_O & QB_O)) }
+      id2 = { (~(load & D)) }
+      id1 = { (~(load & id2)) }
+      id3 = { ( load | (pnt & QA_O & QB_O & QC_O)) }
+      ja  = { (ia1 & ia3) }
+      jb  = { (ib1 & ib3) }
+      jc  = { (ic1 & ic3) }
+      jd  = { (id1 & id3) }
+      ka  = { (ia2 & ia3) }
+      kb  = { (ib2 & ib3) }
+      kc  = { (ic2 & ic3) }
+      kd  = { (id2 & id3) }

uf0  JKff(4)  DPWR DGND
+    $D_HI CLRBAR clkbar
+    ja jb jc jd ka kb kc kd
+    QA_O QB_O QC_O QD_O qabar qbbar qcbar qdbar
+    D0_EFF IO_LS

Udly PINDLY (5,0,4) DPWR DGND
+    QA_O QB_O QC_O QD_O RCO_O
+    CLRBAR CLK ENT LOADBAR
+    QA QB QC QD RCO
+    IO_LS MNTYMXDLY={MNTYMXDLY} IO_LEVEL={IO_LEVEL}
+
+    BOOLEAN:
+       CLOCK= { CHANGED(CLK,0) }
+       CLEAR= { CHANGED(CLRBAR,0) }
+       ENABLET = { CHANGED(ENT,0) }
+       LOADRisHIGH = { (LOADBAR == '1)}
+       LOADRisLO = { (LOADBAR == '0)}
+
+    PINDLY:
+       RCO = {
+              CASE(
+                   ENABLET & TRN_HL, DELAY(-1,9ns,14ns),
+                   ENABLET & TRN_LH, DELAY(-1,9ns,14ns),
+                   CLOCK & TRN_LH, DELAY(-1,20ns,35ns),
+                   CLOCK & TRN_HL, DELAY(-1,18ns,35ns),
+                   DELAY(-1,21ns,36ns)
+                   )
+             }
+       QA QB QC QD = {
+                   CASE(
+                       CLEAR & TRN_HL, DELAY(-1,20ns,28ns),
+                       CLOCK & LOADRisHIGH & TRN_LH, DELAY(-1,13ns,24ns),
+                       CLOCK & LOADRisHIGH & TRN_HL, DELAY(-1,18ns,27ns),
+                       CLOCK & LOADRisLO & TRN_LH, DELAY(-1,13ns,24ns),
+                       CLOCK & LOADRisLO & TRN_HL, DELAY(-1,18ns,27ns),
+                       DELAY(-1,21ns,29ns)
+                       )
+                     }

Ucnstr CONSTRAINT(9) DPWR DGND
+          CLRBAR LOADBAR CLK ENP ENT A B C D
+          IO_LS
+
+      FREQ:
+         NODE = CLK
+         MAXFREQ = 25MEG
+      WIDTH:
+         NODE = CLK
+         MIN_HI = 25ns
+      WIDTH:
+         NODE = CLRBAR
+         MIN_LO = 20n
+      SETUP_HOLD:
+        CLOCK LH = CLK
+        DATA(4) = A B C D
+        SETUPTIME = 20n
+        HOLDTIME = 3n
+        WHEN = { (CLRBAR != '0) }
+      SETUP_HOLD:
+        DATA(3) = LOADBAR ENP ENT
+        CLOCK LH = CLK
+        SETUPTIME = 20NS
+      SETUP_HOLD:
+        DATA(1) = CLRBAR
+        CLOCK LH = CLK
+        SETUPTIME = 25NS

.ENDS 74LS161A

